db.collection.insertOne({ name: "Alice", age: 25 })
db.collection.insertMany([{ name: "Bob" }, { name: "Carol" }])

db.collection.find()
db.collection.find({ name: "Alice" })
db.collection.findOne({ age: 25 })

db.collection.updateOne({ name: "Alice" }, { $set: { age: 26 } })
db.collection.updateMany({ age: { $lt: 20 } }, { $inc: { age: 1 } })
db.collection.replaceOne({ name: "Bob" }, { name: "Bob", age: 30 })

db.collection.deleteOne({ name: "Carol" })
db.collection.deleteMany({ age: { $gt: 30 } })



db.collection.aggregate([{ $match: { age: { $gt: 20 } } }])
db.collection.aggregate([{ $match: { $or: [{ age: 25 }, { name: "Alice" }] } }])
db.collection.aggregate([{ $count: "total" }])

db.collection.aggregate([
  { $group: { _id: "$dept", total: { $sum: 1 } } }
])

db.collection.aggregate([
  { $group: { _id: "$dept", minAge: { $min: "$age" }, maxAge: { $max: "$age" },
              avgAge: { $avg: "$age" }, total: { $sum: "$age" } } }
])

db.collection.aggregate([
  { $group: { _id: "$dept", allNames: { $push: "$name" }, firstName: { $first: "$name" },
              lastName: { $last: "$name" }, uniqueNames: { $addToSet: "$name" } } }
])

db.collection.aggregate([
  { $project: { total: { $add: ["$math", "$science"] },
                diff: { $subtract: ["$math", "$science"] },
                mult: { $multiply: ["$math", "$science"] },
                div: { $divide: ["$math", "$science"] } } }
])

db.collection.aggregate([
  { $project: { fullName: { $concat: ["$first", " ", "$last"] },
                shortName: { $substr: ["$first", 0, 3] },
                thirdSubject: { $arrayElemAt: ["$subjects", 2] },
                passStatus: { $cond: { if: { $gt: ["$marks", 40] }, then: "Pass", else: "Fail" } } } }
])

db.collection.aggregate([{ $match: { age: { $lt: 30 } } }])
db.collection.aggregate([{ $sort: { age: -1 } }])
db.collection.aggregate([{ $limit: 5 }])
db.collection.aggregate([{ $skip: 3 }])
db.collection.aggregate([{ $unwind: "$subjects" }])
db.collection.aggregate([{ $out: "newCollection" }])

db.collection.aggregate([{ $project: { subjectCount: { $size: "$subjects" } } }])
db.collection.aggregate([{ $project: { firstTwo: { $slice: ["$subjects", 2] } } }])
db.collection.aggregate([{ $project: { passed: { $filter: {
  input: "$marks", as: "m", cond: { $gt: ["$$m", 40] } } } } }])
db.collection.aggregate([{ $project: { upper: { $map: {
  input: "$subjects", as: "s", in: { $toUpper: "$$s" } } } } }])
db.collection.aggregate([{ $project: { total: { $reduce: {
  input: "$marks", initialValue: 0,
  in: { $add: ["$$value", "$$this"] } } } } }])


db.collection.updateOne({ name: "Alice" }, { $set: { age: 22 } })
db.collection.updateOne({ name: "Alice" }, { $unset: { age: "" } })
db.collection.updateOne({ name: "Alice" }, { $inc: { marks: 5 } })
db.collection.updateOne({ name: "Alice" }, { $mul: { marks: 2 } })
db.collection.updateOne({}, { $rename: { "department": "dept" } })

db.collection.updateOne({ name: "Alice" }, { $push: { subjects: "Math" } })
db.collection.updateOne({ name: "Alice" }, { $push: { subjects: { $each: ["Physics", "Chemistry"] } } })
db.collection.updateOne({ name: "Alice" }, { $addToSet: { subjects: "Biology" } })
db.collection.updateOne({ name: "Alice" }, { $pull: { subjects: "Math" } })
db.collection.updateOne({ name: "Alice" }, { $pop: { subjects: -1 } })
db.collection.updateOne({ name: "Alice" }, { $push: { subjects: { $each: ["History", "English"], $slice: -3 } } })
db.collection.updateOne({ name: "Alice" }, { $push: { subjects: { $each: ["Economics"], $position: 1 } } })
db.collection.updateOne({ name: "Alice" }, { $push: { scores: { $each: [50, 70], $sort: 1 } } })

db.collection.find({ subjects: { $in: ["Math", "Biology"] } })
db.collection.find({ subjects: { $all: ["Math", "English"] } })
db.collection.find({ marks: { $elemMatch: { subject: "Math", score: { $gte: 50 } } } })



db.collection.createIndex({ field: 1 })
db.students.createIndex({ name: 1 })
db.students.createIndex({ name: 1, age: -1 })
db.articles.createIndex({ content: "text" })
db.articles.find({ $text: { $search: "mongodb indexing" } })
db.users.createIndex({ user_id: "hashed" })
db.students.createIndex({ subjects: 1 })
db.places.createIndex({ location: "2d" })
db.places.createIndex({ location: "2dsphere" })
db.places.find({
  location: {
    $near: {
      $geometry: {
        type: "Point",
        coordinates: [77.5946, 12.9716]
      },
      $maxDistance: 1000
    }
  }
})
db.users.createIndex({ email: 1 }, { unique: true })
db.records.createIndex({ optionalField: 1 }, { sparse: true })
db.logs.createIndex({ createdAt: 1 }, { expireAfterSeconds: 3600 })
db.students.createIndex({ grade: 1 }, { partialFilterExpression: { grade: { $gte: 90 } } })
db.collection.getIndexes()
db.collection.dropIndex({ name: 1 })


db.createUser({
  user: "username",
  pwd: "password",
  roles: [{ role: "roleName", db: "dbName" }]
})

db.dropUser("username")

db.updateUser("username", {
  pwd: "newpassword",
  roles: [{ role: "roleName", db: "dbName" }]
})

db.grantRolesToUser("username", [{ role: "roleName", db: "dbName" }])
db.revokeRolesFromUser("username", [{ role: "roleName", db: "dbName" }])

db.createRole({ role: "roleName", privileges: [], roles: [] })
db.dropRole("roleName")

db.getUser("username")
db.getUsers()
db.getRoles()

db.dropAllUsersFromDatabase()

db.auth("username", "password")